[
  {
    "id": "e3f3292a-97ef-466a-971f-fe770e28946d",
    "title": "tailwind.config.js",
    "code": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{html,js,jsx}\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [\n    require(\"@tailwindcss/typography\"),\n    require(\"@tailwindcss/forms\"),\n    require(\"@tailwindcss/aspect-ratio\")\n  ],\n};\n",
    "language": "javascript",
    "description": "Description tailwind.config.js",
    "tags": [
      "Js"
    ],
    "createdAt": "2025-03-06T16:47:11.044Z",
    "updatedAt": "2025-03-06T16:47:26.629Z"
  },
  {
    "id": "483171e5-304d-4d7a-864e-3e6bcae65406",
    "title": "webpack.main.config.js",
    "code": "module.exports = {\n  /**\n   * This is the main entry point for your application, it's the first file\n   * that runs in the main process.\n   */\n  entry: './src/main.js',\n  // Put your normal webpack config below here\n  module: {\n    rules: require('./webpack.rules'),\n  },\n};\n",
    "language": "javascript",
    "description": "Description webpack.main.config.js",
    "tags": [
      "Js"
    ],
    "createdAt": "2025-03-06T16:48:03.433Z",
    "updatedAt": "2025-03-06T16:48:03.433Z"
  },
  {
    "id": "2201ec7c-e9bf-4de6-9b90-3a762da0d20c",
    "title": "App.jsx",
    "code": "import React, { useState, useEffect } from 'react';\nimport { AppProvider, useAppContext } from './context/AppContext';\nimport Sidebar from './components/Sidebar';\nimport SnippetList from './components/SnippetList';\nimport SnippetDetail from './components/SnippetDetail';\nimport SnippetForm from './components/SnippetForm';\nimport InfoPage from './components/InfoPage';\nimport SplashScreen from './components/SplashScreen';\n\nconst AppContent = () => {\n  const { state, deleteSnippet } = useAppContext(); \n  const [selectedTag, setSelectedTag] = useState(null);\n  const [selectedSnippetId, setSelectedSnippetId] = useState(null);\n  const [showSnippetForm, setShowSnippetForm] = useState(false);\n  const [editingSnippet, setEditingSnippet] = useState(undefined);\n  const [showInfoPage, setShowInfoPage] = useState(false);\n  const [splashFinished, setSplashFinished] = useState(false);\n\n  // R√©cup√©rer le snippet s√©lectionn√© directement depuis le state pour avoir toujours la version √† jour\n  const selectedSnippet = selectedSnippetId \n    ? state.snippets.find(s => s.id === selectedSnippetId) \n    : null;\n\n  const handleNewSnippet = (prefilledValues = undefined) => {\n    if (prefilledValues) {\n      setEditingSnippet({\n        title: prefilledValues.title || '',\n        code: prefilledValues.code || '',\n        description: prefilledValues.description || '',\n        language: prefilledValues.language || 'text',\n        tags: prefilledValues.tags || [] \n      });\n    } else {\n      setEditingSnippet(undefined);\n    }\n    setShowSnippetForm(true);\n    setShowInfoPage(false);\n  };\n\n  const handleEditSnippet = (snippet) => {\n    setEditingSnippet(snippet);\n    setShowSnippetForm(true);\n    setShowInfoPage(false);\n  };\n\n  const handleCloseForm = () => {\n    setShowSnippetForm(false);\n    setEditingSnippet(undefined);\n  };\n\n  const handleSaveForm = () => {\n    setShowSnippetForm(false);\n    \n    // Si nous √©tions en train d'√©diter un snippet, assurons-nous qu'il reste s√©lectionn√©\n    if (editingSnippet && editingSnippet.id) {\n      setSelectedSnippetId(editingSnippet.id);\n    }\n    \n    setEditingSnippet(undefined);\n  };\n\n  const handleSelectTag = (tag) => {\n    setSelectedTag(tag);\n    setSelectedSnippetId(null);\n    setShowInfoPage(false);\n  };\n\n  const handleViewSnippet = (snippet) => {\n    setSelectedSnippetId(snippet.id);\n    setShowSnippetForm(false);\n    setShowInfoPage(false);\n  };\n\n  const handleDeleteSnippet = (id) => {\n    deleteSnippet(id);\n    if (selectedSnippetId === id) {\n      setSelectedSnippetId(null);\n    }\n  };\n\n  const handleShowInfo = () => {\n    setShowInfoPage(true);\n  };\n\n  const handleGoBack = () => {\n    setShowInfoPage(false);\n  };\n  \n  const handleSplashFinish = () => {\n    setSplashFinished(true);\n  };\n\n  if (!splashFinished) {\n    return <SplashScreen onFinish={handleSplashFinish} />;\n  }\n\n  return (\n    <div className={`flex h-screen overflow-hidden ${state.theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-white text-gray-800'}`}>\n      <Sidebar \n        onNewSnippet={handleNewSnippet} \n        onSelectTag={handleSelectTag}\n        selectedTag={selectedTag}\n        onShowInfo={handleShowInfo}\n      />\n      \n      {showInfoPage ? (\n        <div className=\"flex-1 overflow-hidden\">\n          <InfoPage onGoBack={handleGoBack} />\n        </div>\n      ) : (\n        <>\n          <SnippetList \n            selectedTag={selectedTag}\n            onEditSnippet={handleEditSnippet}\n            onViewSnippet={handleViewSnippet}\n            onDeleteSnippet={handleDeleteSnippet}\n            selectedSnippetId={selectedSnippetId}\n          />\n          \n          {selectedSnippet ? (\n            <SnippetDetail snippet={selectedSnippet} />\n          ) : (\n            <div className={`flex-1 flex flex-col items-center justify-center ${state.theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-white text-gray-800'}`}>\n              <div className=\"text-6xl mb-4 opacity-20\">üìù</div>\n              <h2 className=\"text-xl font-semibold mb-2\">No Snippet Selected</h2>\n              <p className={`${state.theme === 'dark' ? 'text-gray-400' : 'text-gray-500'} text-center`}>\n                Select a snippet from the list<br />or create a new one\n              </p>\n            </div>\n          )}\n          \n          {showSnippetForm && (\n            <SnippetForm \n              snippet={editingSnippet} \n              onClose={handleCloseForm}\n              onSave={handleSaveForm}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <AppProvider>\n      <AppContent />\n    </AppProvider>\n  );\n}\n\nexport default App;",
    "language": "jsx",
    "description": "Description App.jsx",
    "tags": [
      "jsx"
    ],
    "createdAt": "2025-03-06T16:48:58.453Z",
    "updatedAt": "2025-03-06T16:48:58.453Z"
  },
  {
    "id": "5b485b27-54b7-4fe1-8db5-49fb7e5a9bee",
    "title": "index.css",
    "code": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n\n@keyframes fadeIn {\n    0% {\n      opacity: 0;\n      transform: translateY(5px) scale(0.95);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n  }\n  \n  @keyframes gentleSpin {\n    0% {\n      transform: rotate(0deg) scale(1);\n    }\n    50% {\n      transform: rotate(180deg) scale(1.05);\n    }\n    100% {\n      transform: rotate(360deg) scale(1);\n    }\n  }\n  \n  @keyframes pulse {\n    0% {\n      opacity: 1;\n      transform: scale(1);\n    }\n    50% {\n      opacity: 0.85;\n      transform: scale(0.98);\n    }\n    100% {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n  \n  @keyframes gradientFlow {\n    0% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n    100% {\n      background-position: 0% 50%;\n    }\n  }\n  \n  @keyframes shimmer {\n    0% {\n      background-position: -200% 50%;\n    }\n    100% {\n      background-position: 200% 50%;\n    }\n  }\n  \n  .transition-all {\n    transition-duration: 1000ms;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  }",
    "language": "css",
    "description": "Description index.css",
    "tags": [
      "css"
    ],
    "createdAt": "2025-03-06T16:49:53.726Z",
    "updatedAt": "2025-03-06T17:03:08.455Z"
  },
  {
    "id": "7467d1a6-5cb0-46f6-baa9-09b9249f86a0",
    "title": "index.html",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Code Wallet</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"></script>\n</body>\n</html>",
    "language": "html",
    "description": "Description index.html",
    "tags": [
      "html"
    ],
    "createdAt": "2025-03-06T16:50:56.292Z",
    "updatedAt": "2025-03-06T16:50:56.292Z"
  },
  {
    "id": "88608255-7ac5-4134-944a-712e0baf835f",
    "title": "main.js",
    "code": "const { app, BrowserWindow, ipcMain } = require('electron');\nconst path = require('path');\nconst fs = require('fs');\n\n// √âvite les probl√®mes de d√©marrage sur Windows\nif (require('electron-squirrel-startup')) {\n  app.quit();\n}\n\n// D√©terminer si nous sommes en d√©veloppement ou en production\nconst isDev = process.env.NODE_ENV === 'development' || !app.isPackaged;\n\n// D√©tecter automatiquement la racine du projet\nlet STORAGE_PATH;\n\nif (isDev) {\n  // En d√©veloppement, utiliser le r√©pertoire de travail actuel\n  STORAGE_PATH = process.cwd(); // Obtient le r√©pertoire de travail actuel\n  console.log('Chemin de stockage (dev):', STORAGE_PATH);\n} else {\n  // En production, utiliser un dossier dans les donn√©es utilisateur\n  STORAGE_PATH = path.join(app.getPath('userData'), 'data');\n  \n  // S'assurer que le dossier existe\n  if (!fs.existsSync(STORAGE_PATH)) {\n    fs.mkdirSync(STORAGE_PATH, { recursive: true });\n  }\n  console.log('Chemin de stockage (prod):', STORAGE_PATH);\n}\n\n// Chemins de fichiers pour le stockage\nconst SNIPPETS_FILE = path.join(STORAGE_PATH, 'snippets.json');\nconst TAGS_FILE = path.join(STORAGE_PATH, 'tags.json');\n\nconsole.log('Fichier snippets sera √†:', SNIPPETS_FILE);\nconsole.log('Fichier tags sera √†:', TAGS_FILE);\n\n// V√©rifier/cr√©er les fichiers lors du d√©marrage\ntry {\n  if (!fs.existsSync(SNIPPETS_FILE)) {\n    fs.writeFileSync(SNIPPETS_FILE, JSON.stringify([]));\n    console.log('Fichier snippets.json cr√©√© avec succ√®s');\n  }\n  if (!fs.existsSync(TAGS_FILE)) {\n    fs.writeFileSync(TAGS_FILE, JSON.stringify([]));\n    console.log('Fichier tags.json cr√©√© avec succ√®s');\n  }\n} catch (error) {\n  console.error('Erreur lors de la cr√©ation des fichiers JSON:', error);\n}\n\n// Variable globale pour la fen√™tre principale\nlet mainWindow = null;\n\n// Cr√©er la fen√™tre principale\nconst createWindow = () => {\n  // Cr√©er la fen√™tre principale\n  mainWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    webPreferences: {\n      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,\n      contextIsolation: true,\n      nodeIntegration: false,\n    },\n    autoHideMenuBar: true,\n  });\n\n  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);\n\n\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n};\n\n// Configurer les gestionnaires IPC\n\nfunction setupIpcHandlers() {\n  // Charger les snippets\n  ipcMain.handle('load-snippets', () => {\n    try {\n      if (!fs.existsSync(SNIPPETS_FILE)) {\n        fs.writeFileSync(SNIPPETS_FILE, JSON.stringify([]));\n        return [];\n      }\n      const data = fs.readFileSync(SNIPPETS_FILE, 'utf8');\n      return JSON.parse(data);\n    } catch (error) {\n      console.error('Error loading snippets:', error);\n      return [];\n    }\n  });\n\n  // Sauvegarder les snippets\n  ipcMain.handle('save-snippets', (_, snippets) => {\n    try {\n      fs.writeFileSync(SNIPPETS_FILE, JSON.stringify(snippets, null, 2));\n      return true;\n    } catch (error) {\n      console.error('Error saving snippets:', error);\n      return false;\n    }\n  });\n\n  // Charger les tags\n  ipcMain.handle('load-tags', () => {\n    try {\n      if (!fs.existsSync(TAGS_FILE)) {\n        fs.writeFileSync(TAGS_FILE, JSON.stringify([]));\n        return [];\n      }\n      const data = fs.readFileSync(TAGS_FILE, 'utf8');\n      return JSON.parse(data);\n    } catch (error) {\n      console.error('Error loading tags:', error);\n      return [];\n    }\n  });\n\n  // Sauvegarder les tags\n  ipcMain.handle('save-tags', (_, tags) => {\n    try {\n      fs.writeFileSync(TAGS_FILE, JSON.stringify(tags, null, 2));\n      return true;\n    } catch (error) {\n      console.error('Error saving tags:', error);\n      return false;\n    }\n  });\n  \n  // Ajouter un handler pour obtenir le chemin de stockage\n  ipcMain.handle('get-storage-path', () => {\n    return STORAGE_PATH;\n  });\n}\n\n// Initialiser l'application\napp.whenReady().then(() => {\n  setupIpcHandlers();\n  createWindow();\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow();\n    }\n  });\n});\n\n// Gestion de la fermeture de l'application\napp.on('window-all-closed', () => {\n  // Nettoyer correctement la fen√™tre\n  if (mainWindow) {\n    if (!mainWindow.isDestroyed()) {\n      mainWindow.webContents.closeDevTools();\n      mainWindow.removeAllListeners();\n      mainWindow.close();\n    }\n    mainWindow = null;\n  }\n\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\n// Gestion des √©v√©nements avant la fermeture\napp.on('before-quit', () => {\n  if (mainWindow && !mainWindow.isDestroyed()) {\n    mainWindow.removeAllListeners();\n    mainWindow.destroy();\n  }\n});\n\n// Gestion des erreurs non captur√©es\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error);\n  \n  // Fermeture propre de l'application en cas d'erreur\n  if (mainWindow) {\n    mainWindow.close();\n  }\n  app.quit();\n});",
    "language": "javascript",
    "description": "Description main.js",
    "tags": [
      "Js"
    ],
    "createdAt": "2025-03-06T16:52:19.028Z",
    "updatedAt": "2025-03-06T16:52:19.028Z"
  }
]