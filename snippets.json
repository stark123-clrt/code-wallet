[
  {
    "id": "7198ea01-5671-4294-bc73-6311492015ab",
    "title": "App.jsx",
    "code": "import React, { useState } from 'react';\nimport { AppProvider, useAppContext } from './context/AppContext';\nimport Sidebar from './components/Sidebar';\nimport SnippetList from './components/SnippetList';\nimport SnippetDetail from './components/SnippetDetail';\nimport SnippetForm from './components/SnippetForm';\nimport InfoPage from './components/InfoPage';\n\nconst AppContent = () => {\n  const { state, deleteSnippet } = useAppContext(); \n  const [selectedTag, setSelectedTag] = useState(null);\n  const [selectedSnippet, setSelectedSnippet] = useState(null);\n  const [showSnippetForm, setShowSnippetForm] = useState(false);\n  const [editingSnippet, setEditingSnippet] = useState(undefined);\n  const [showInfoPage, setShowInfoPage] = useState(false);\n\n  const handleNewSnippet = (prefilledValues = undefined) => {\n    if (prefilledValues) {\n      setEditingSnippet({\n        title: prefilledValues.title || '',\n        code: prefilledValues.code || '',\n        description: prefilledValues.description || '',\n        language: prefilledValues.language || 'text',\n        tags: prefilledValues.tags || [] \n      });\n    } else {\n      setEditingSnippet(undefined);\n    }\n    setShowSnippetForm(true);\n    setShowInfoPage(false);\n  };\n\n  const handleEditSnippet = (snippet) => {\n    setEditingSnippet(snippet);\n    setShowSnippetForm(true);\n    setShowInfoPage(false);\n  };\n\n  const handleCloseForm = () => {\n    setShowSnippetForm(false);\n    setEditingSnippet(undefined);\n  };\n\n  const handleSaveForm = () => {\n    setShowSnippetForm(false);\n    setEditingSnippet(undefined);\n  };\n\n  const handleSelectTag = (tag) => {\n    setSelectedTag(tag);\n    setSelectedSnippet(null);\n    setShowInfoPage(false);\n  };\n\n  const handleViewSnippet = (snippet) => {\n    setSelectedSnippet(snippet);\n    setShowSnippetForm(false);\n    setShowInfoPage(false);\n  };\n\n  const handleDeleteSnippet = (id) => {\n    deleteSnippet(id);\n    if (selectedSnippet && selectedSnippet.id === id) {\n      setSelectedSnippet(null);\n    }\n  };\n\n  const handleShowInfo = () => {\n    setShowInfoPage(true);\n  };\n\n  const handleGoBack = () => {\n    setShowInfoPage(false);\n  };\n\n  return (\n    <div className={`flex h-screen overflow-hidden ${state.theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-white text-gray-800'}`}>\n      <Sidebar \n        onNewSnippet={handleNewSnippet} \n        onSelectTag={handleSelectTag}\n        selectedTag={selectedTag}\n        onShowInfo={handleShowInfo}\n      />\n      \n      {showInfoPage ? (\n        <div className=\"flex-1 overflow-hidden\">\n          <InfoPage onGoBack={handleGoBack} />\n        </div>\n      ) : (\n        <>\n          <SnippetList \n            selectedTag={selectedTag}\n            onEditSnippet={handleEditSnippet}\n            onViewSnippet={handleViewSnippet}\n            onDeleteSnippet={handleDeleteSnippet}\n            selectedSnippetId={selectedSnippet ? selectedSnippet.id : null}\n          />\n          \n          {selectedSnippet ? (\n            <SnippetDetail snippet={selectedSnippet} />\n          ) : (\n            <div className={`flex-1 flex flex-col items-center justify-center ${state.theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-white text-gray-800'}`}>\n              <div className=\"text-6xl mb-4 opacity-20\">üìù</div>\n              <h2 className=\"text-xl font-semibold mb-2\">No Snippet Selected</h2>\n              <p className={`${state.theme === 'dark' ? 'text-gray-400' : 'text-gray-500'} text-center`}>\n                Select a snippet from the list<br />or create a new one\n              </p>\n            </div>\n          )}\n          \n          {showSnippetForm && (\n            <SnippetForm \n              snippet={editingSnippet} \n              onClose={handleCloseForm}\n              onSave={handleSaveForm}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <AppProvider>\n      <AppContent />\n    </AppProvider>\n  );\n}\n\nexport default App;",
    "language": "jsx",
    "description": "Description App.jsx",
    "tags": [
      "Js"
    ],
    "createdAt": "2025-03-05T17:51:44.791Z",
    "updatedAt": "2025-03-05T17:59:49.914Z"
  },
  {
    "id": "0d0eb2f1-a37b-4fbb-914f-4820e0404f56",
    "title": "App.jsx",
    "code": "import React, { useState } from 'react';\nimport { AppProvider, useAppContext } from './context/AppContext';\nimport Sidebar from './components/Sidebar';\nimport SnippetList from './components/SnippetList';\nimport SnippetDetail from './components/SnippetDetail';\nimport SnippetForm from './components/SnippetForm';\nimport InfoPage from './components/InfoPage';\n\nconst AppContent = () => {\n  const { state, deleteSnippet } = useAppContext(); \n  const [selectedTag, setSelectedTag] = useState(null);\n  const [selectedSnippet, setSelectedSnippet] = useState(null);\n  const [showSnippetForm, setShowSnippetForm] = useState(false);\n  const [editingSnippet, setEditingSnippet] = useState(undefined);\n  const [showInfoPage, setShowInfoPage] = useState(false);\n\n  const handleNewSnippet = (prefilledValues = undefined) => {\n    if (prefilledValues) {\n      setEditingSnippet({\n        title: prefilledValues.title || '',\n        code: prefilledValues.code || '',\n        description: prefilledValues.description || '',\n        language: prefilledValues.language || 'text',\n        tags: prefilledValues.tags || [] \n      });\n    } else {\n      setEditingSnippet(undefined);\n    }\n    setShowSnippetForm(true);\n    setShowInfoPage(false);\n  };\n\n  const handleEditSnippet = (snippet) => {\n    setEditingSnippet(snippet);\n    setShowSnippetForm(true);\n    setShowInfoPage(false);\n  };\n\n  const handleCloseForm = () => {\n    setShowSnippetForm(false);\n    setEditingSnippet(undefined);\n  };\n\n  const handleSaveForm = () => {\n    setShowSnippetForm(false);\n    setEditingSnippet(undefined);\n  };\n\n  const handleSelectTag = (tag) => {\n    setSelectedTag(tag);\n    setSelectedSnippet(null);\n    setShowInfoPage(false);\n  };\n\n  const handleViewSnippet = (snippet) => {\n    setSelectedSnippet(snippet);\n    setShowSnippetForm(false);\n    setShowInfoPage(false);\n  };\n\n  const handleDeleteSnippet = (id) => {\n    deleteSnippet(id);\n    if (selectedSnippet && selectedSnippet.id === id) {\n      setSelectedSnippet(null);\n    }\n  };\n\n  const handleShowInfo = () => {\n    setShowInfoPage(true);\n  };\n\n  const handleGoBack = () => {\n    setShowInfoPage(false);\n  };\n\n  return (\n    <div className={`flex h-screen overflow-hidden ${state.theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-white text-gray-800'}`}>\n      <Sidebar \n        onNewSnippet={handleNewSnippet} \n        onSelectTag={handleSelectTag}\n        selectedTag={selectedTag}\n        onShowInfo={handleShowInfo}\n      />\n      \n      {showInfoPage ? (\n        <div className=\"flex-1 overflow-hidden\">\n          <InfoPage onGoBack={handleGoBack} />\n        </div>\n      ) : (\n        <>\n          <SnippetList \n            selectedTag={selectedTag}\n            onEditSnippet={handleEditSnippet}\n            onViewSnippet={handleViewSnippet}\n            onDeleteSnippet={handleDeleteSnippet}\n            selectedSnippetId={selectedSnippet ? selectedSnippet.id : null}\n          />\n          \n          {selectedSnippet ? (\n            <SnippetDetail snippet={selectedSnippet} />\n          ) : (\n            <div className={`flex-1 flex flex-col items-center justify-center ${state.theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-white text-gray-800'}`}>\n              <div className=\"text-6xl mb-4 opacity-20\">üìù</div>\n              <h2 className=\"text-xl font-semibold mb-2\">No Snippet Selected</h2>\n              <p className={`${state.theme === 'dark' ? 'text-gray-400' : 'text-gray-500'} text-center`}>\n                Select a snippet from the list<br />or create a new one\n              </p>\n            </div>\n          )}\n          \n          {showSnippetForm && (\n            <SnippetForm \n              snippet={editingSnippet} \n              onClose={handleCloseForm}\n              onSave={handleSaveForm}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <AppProvider>\n      <AppContent />\n    </AppProvider>\n  );\n}\n\nexport default App;",
    "language": "jsx",
    "description": "Description App.jsx",
    "tags": [
      "Js"
    ],
    "createdAt": "2025-03-05T18:00:30.715Z",
    "updatedAt": "2025-03-05T18:00:30.715Z"
  },
  {
    "id": "f4cdd214-e641-44df-af04-ab6a42a260d1",
    "title": "scraper.py",
    "code": "from playwright.sync_api import sync_playwright\r\nimport time\r\nimport json\r\nimport re\r\nimport os\r\nimport sys\r\nimport traceback\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\n\r\ndef scrape_google_maps(query=\"Restaurant Paris\", output_file=\"static/results.json\"):\r\n    # S'assurer que le dossier static existe\r\n    os.makedirs(os.path.dirname(output_file), exist_ok=True)\r\n    \r\n    # Cr√©er un fichier JSON vide pour commencer\r\n    with open(output_file, \"w\", encoding=\"utf-8\") as f:\r\n        json.dump([], f, ensure_ascii=False, indent=4)\r\n    \r\n    print(f\"D√©but du scraping pour: {query}\")\r\n    print(f\"Les r√©sultats seront enregistr√©s dans: {os.path.abspath(output_file)}\")\r\n    \r\n    results = []\r\n    \r\n    try:\r\n        with sync_playwright() as p:\r\n            browser = p.chromium.launch(headless=False)\r\n            page = browser.new_page()\r\n            \r\n            try:\r\n                # Aller sur Google Maps\r\n                print(\"Navigation vers Google Maps...\")\r\n                page.goto(\"https://www.google.com/maps\", timeout=60000)\r\n                time.sleep(2)\r\n                \r\n                # Accepter les cookies si n√©cessaire\r\n                if page.locator(\"button:has-text('Tout accepter')\").count() > 0:\r\n                    page.locator(\"button:has-text('Tout accepter')\").first.click()\r\n                    time.sleep(1)\r\n                \r\n                # Rechercher l'activit√©\r\n                print(f\"Recherche de: {query}\")\r\n                page.fill(\"input[name='q']\", query)\r\n                page.keyboard.press(\"Enter\")\r\n                time.sleep(5)\r\n                \r\n                # Scroller pour charger plus de r√©sultats\r\n                print(\"Chargement des r√©sultats...\")\r\n                for _ in range(4):\r\n                    page.mouse.wheel(0, 2000)\r\n                    time.sleep(2)\r\n                \r\n                # Extraire les informations des √©tablissements\r\n                places = page.locator(\".Nv2PK\").all()\r\n                if not places:\r\n                    places = page.locator(\"[role='feed'] > div\").all()\r\n                \r\n                if not places:\r\n                    print(\"‚ùå Aucun r√©sultat trouv√©!\")\r\n                    # Sauvegarder un fichier JSON vide\r\n                    with open(output_file, \"w\", encoding=\"utf-8\") as f:\r\n                        json.dump([], f, ensure_ascii=False, indent=4)\r\n                    return []\r\n                \r\n                print(f\"Nombre d'√©tablissements trouv√©s: {len(places)}\")\r\n                \r\n                # Limiter √† 30 r√©sultats\r\n                places = places[:30]\r\n                \r\n                for i, place in enumerate(places):\r\n                    try:\r\n                        #-------------------------------------------\r\n                        # MODULE 1: EXTRACTION DU NOM\r\n                        #-------------------------------------------\r\n                        name = \"N/A\"\r\n                        if place.locator(\".qBF1Pd\").count() > 0:\r\n                            name = place.locator(\".qBF1Pd\").inner_text()\r\n                        elif place.locator(\"h3\").count() > 0:\r\n                            name = place.locator(\"h3\").inner_text()\r\n                        \r\n                        print(f\"Extraction {i+1}/{len(places)}: {name}\")\r\n                        \r\n                        #-------------------------------------------\r\n                        # MODULE 2: EXTRACTION DE LA NOTATION\r\n                        #-------------------------------------------\r\n                        rating = \"N/A\"\r\n                        if place.locator(\".MW4etd\").count() > 0:\r\n                            rating = place.locator(\".MW4etd\").inner_text()\r\n                        \r\n                        # Cliquer sur l'√©tablissement pour voir plus de d√©tails\r\n                        place.click()\r\n                        time.sleep(3)\r\n                        \r\n                        #-------------------------------------------\r\n                        # MODULE 3: EXTRACTION DE L'ADRESSE\r\n                        #-------------------------------------------\r\n                        address = \"N/A\"\r\n                        try:\r\n                            # Premi√®re m√©thode: chercher des boutons d'adresse\r\n                            address_selectors = [\r\n                                'button[data-item-id=\"address\"]',\r\n                                'button[aria-label*=\"adresse\"]',\r\n                                'button[aria-label*=\"Adresse\"]',\r\n                                'button[data-tooltip*=\"adresse\"]'\r\n                            ]\r\n                            \r\n                            for selector in address_selectors:\r\n                                address_elements = page.locator(selector).all()\r\n                                for element in address_elements:\r\n                                    text = element.inner_text()\r\n                                    # V√©rifier si le texte ressemble √† une adresse\r\n                                    if re.search(r'\\d+[\\s,]+(?:rue|avenue|boulevard|place|chemin|impasse|all√©e|cours|quai|route)', text, re.IGNORECASE) or re.search(r'\\d{5}', text):\r\n                                        address = text\r\n                                        print(f\"Adresse trouv√©e via bouton: {address}\")\r\n                                        break\r\n                                if address != \"N/A\":\r\n                                    break\r\n                            \r\n                            # Deuxi√®me m√©thode: chercher l'√©l√©ment avec l'ic√¥ne de localisation\r\n                            if address == \"N/A\":\r\n                                try:\r\n                                    # Chercher l'ic√¥ne de localisation\r\n                                    location_icons = page.locator('img[src*=\"maps/api/js/StaticMapService.GetMapImage\"]').all()\r\n                                    if len(location_icons) > 0:\r\n                                        # Remonter √† l'√©l√©ment parent qui pourrait contenir l'adresse\r\n                                        parent = location_icons[0].locator('xpath=./ancestor::div[3]')\r\n                                        if parent.count() > 0:\r\n                                            address_text = parent.inner_text()\r\n                                            if address_text and len(address_text) > 5:  # V√©rifier que ce n'est pas vide\r\n                                                address = address_text\r\n                                                print(f\"Adresse trouv√©e via ic√¥ne: {address}\")\r\n                                except Exception as e:\r\n                                    print(f\"Erreur lors de la recherche d'ic√¥ne: {e}\")\r\n                            \r\n                            # Troisi√®me m√©thode: chercher dans tout le panneau des d√©tails\r\n                            if address == \"N/A\":\r\n                                try:\r\n                                    dialog = page.locator('[role=\"dialog\"]')\r\n                                    if dialog.count() > 0:\r\n                                        dialog_text = dialog.inner_text()\r\n                                        # Rechercher des motifs d'adresse fran√ßaise\r\n                                        address_patterns = [\r\n                                            r'\\d+[\\s,]+(?:rue|avenue|boulevard|place|chemin|impasse|all√©e|cours|quai|route)[^,\\n]{3,50}(?:[,\\s]+\\d{5})?[,\\s]+(?:[a-z√†-√ø\\s-]+)',\r\n                                            r'\\d+\\s+[a-z√†-√ø\\s-]+,\\s*\\d{5}\\s+[a-z√†-√ø\\s-]+'\r\n                                        ]\r\n                                        \r\n                                        for pattern in address_patterns:\r\n                                            match = re.search(pattern, dialog_text, re.IGNORECASE)\r\n                                            if match:\r\n                                                address = match.group(0)\r\n                                                print(f\"Adresse trouv√©e via texte: {address}\")\r\n                                                break\r\n                                except Exception as e:\r\n                                    print(f\"Erreur lors de la recherche dans le dialogue: {e}\")\r\n                            \r\n                            # Quatri√®me m√©thode: utiliser les √©l√©ments de la liste\r\n                            if address == \"N/A\":\r\n                                try:\r\n                                    # Chercher parmi les √©l√©ments W4Efsd qui pourraient contenir l'adresse\r\n                                    address_elements = page.locator('.w27iwc').all()\r\n                                    for element in address_elements:\r\n                                        text = element.inner_text()\r\n                                        if re.search(r'\\d+', text) and not re.search(r'√©toile|star|note|avis|review', text, re.IGNORECASE):\r\n                                            address = text\r\n                                            print(f\"Adresse trouv√©e via w27iwc: {address}\")\r\n                                            break\r\n                                except Exception as e:\r\n                                    print(f\"Erreur lors de la recherche w27iwc: {e}\")\r\n                        except Exception as e:\r\n                            print(f\"Erreur lors de l'extraction de l'adresse: {e}\")\r\n                        \r\n                        #-------------------------------------------\r\n                        # MODULE 4: EXTRACTION DU T√âL√âPHONE\r\n                        #-------------------------------------------\r\n                        phone = \"N/A\"\r\n                        try:\r\n                            # Premi√®re m√©thode: rechercher via des s√©lecteurs sp√©cifiques\r\n                            phone_selectors = [\r\n                                'button[data-item-id=\"phone:tel\"]',\r\n                                'button[aria-label*=\"t√©l√©phone\"]',\r\n                                'button[aria-label*=\"T√©l√©phone\"]',\r\n                                'button[data-tooltip*=\"t√©l√©phone\"]',\r\n                                'button[jsaction*=\"phone\"]',\r\n                                '.CsEnBe'  # Classe utilis√©e par Google Maps pour les infos de contact\r\n                            ]\r\n                            \r\n                            for selector in phone_selectors:\r\n                                phone_elements = page.locator(selector).all()\r\n                                for element in phone_elements:\r\n                                    text = element.inner_text()\r\n                                    # Chercher un num√©ro de t√©l√©phone fran√ßais (formats typiques)\r\n                                    phone_match = re.search(r'(?:0|\\+33|0033)\\s*[1-9](?:[\\s.-]?\\d{2}){4}', text)\r\n                                    if phone_match:\r\n                                        phone = phone_match.group(0)\r\n                                        print(f\"T√©l√©phone trouv√© via s√©lecteur: {phone}\")\r\n                                        break\r\n                                \r\n                                if phone != \"N/A\":\r\n                                    break\r\n                            \r\n                            # Deuxi√®me m√©thode: chercher un num√©ro de t√©l√©phone dans tout le panneau\r\n                            if phone == \"N/A\":\r\n                                try:\r\n                                    dialog = page.locator('[role=\"dialog\"]')\r\n                                    if dialog.count() > 0:\r\n                                        dialog_text = dialog.inner_text()\r\n                                        # Formats de t√©l√©phones fran√ßais\r\n                                        phone_patterns = [\r\n                                            r'(?:0|\\+33|0033)\\s*[1-9](?:[\\s.-]?\\d{2}){4}',  # Format standard\r\n                                            r'0[1-9]\\s\\d{2}\\s\\d{2}\\s\\d{2}\\s\\d{2}',          # Format avec espaces\r\n                                            r'0[1-9]\\.\\d{2}\\.\\d{2}\\.\\d{2}\\.\\d{2}'           # Format avec points\r\n                                        ]\r\n                                        \r\n                                        for pattern in phone_patterns:\r\n                                            match = re.search(pattern, dialog_text)\r\n                                            if match:\r\n                                                phone = match.group(0)\r\n                                                print(f\"T√©l√©phone trouv√© via texte: {phone}\")\r\n                                                break\r\n                                except Exception as e:\r\n                                    print(f\"Erreur lors de la recherche de t√©l√©phone dans le dialogue: {e}\")\r\n                            \r\n                            # Troisi√®me m√©thode: chercher des √©l√©ments sp√©cifiques contenant des chiffres\r\n                            if phone == \"N/A\":\r\n                                try:\r\n                                    number_elements = page.locator('xpath=//div[contains(text(), \"01\") or contains(text(), \"02\") or contains(text(), \"03\") or contains(text(), \"04\") or contains(text(), \"05\") or contains(text(), \"06\") or contains(text(), \"07\")]').all()\r\n                                    for element in number_elements:\r\n                                        text = element.inner_text()\r\n                                        if re.search(r'0[1-9]\\s*\\d{2}\\s*\\d{2}\\s*\\d{2}\\s*\\d{2}', text):\r\n                                            phone = text.strip()\r\n                                            print(f\"T√©l√©phone trouv√© directement: {phone}\")\r\n                                            break\r\n                                except Exception as e:\r\n                                    print(f\"Erreur lors de la recherche directe de t√©l√©phone: {e}\")\r\n                        except Exception as e:\r\n                            print(f\"Erreur lors de l'extraction du t√©l√©phone: {e}\")\r\n                        \r\n                        #-------------------------------------------\r\n                        # MODULE 5: EXTRACTION DU SITE WEB\r\n                        #-------------------------------------------\r\n                        website = \"N/A\"\r\n                        try:\r\n                            # Premi√®re m√©thode: rechercher via des s√©lecteurs d'ancres\r\n                            website_selectors = [\r\n                                'a[data-item-id=\"authority\"]',\r\n                                'a[jsaction*=\"authority\"]',\r\n                                'a[aria-label*=\"Site Web\"]',\r\n                                'a[aria-label*=\"site web\"]',\r\n                                'a[data-tooltip*=\"site web\"]'\r\n                            ]\r\n                            \r\n                            for selector in website_selectors:\r\n                                website_elements = page.locator(selector).all()\r\n                                for element in website_elements:\r\n                                    href = element.get_attribute(\"href\")\r\n                                    if href and (href.startswith(\"http\") or href.startswith(\"www\")):\r\n                                        website = href\r\n                                        print(f\"Site web trouv√© via s√©lecteur: {website}\")\r\n                                        break\r\n                                \r\n                                if website != \"N/A\":\r\n                                    break\r\n                            \r\n                            # Deuxi√®me m√©thode: chercher tous les liens dans le panneau\r\n                            if website == \"N/A\":\r\n                                try:\r\n                                    # Chercher tous les liens\r\n                                    link_elements = page.locator('[role=\"dialog\"] a[href^=\"http\"]').all()\r\n                                    for element in link_elements:\r\n                                        href = element.get_attribute(\"href\")\r\n                                        # Exclure les liens vers Google\r\n                                        if href and \"google.com\" not in href:\r\n                                            website = href\r\n                                            print(f\"Site web trouv√© via liens: {website}\")\r\n                                            break\r\n                                except Exception as e:\r\n                                    print(f\"Erreur lors de la recherche de liens: {e}\")\r\n                            \r\n                            # Troisi√®me m√©thode: chercher du texte contenant des domaines\r\n                            if website == \"N/A\":\r\n                                try:\r\n                                    domain_elements = page.locator('xpath=//*[contains(text(), \".fr\") or contains(text(), \".com\") or contains(text(), \".net\") or contains(text(), \".org\")]').all()\r\n                                    for element in domain_elements:\r\n                                        text = element.inner_text()\r\n                                        domain_match = re.search(r'(?:www\\.)?([a-z0-9-]+\\.[a-z]{2,}(?:\\.[a-z]{2,})?)', text, re.IGNORECASE)\r\n                                        if domain_match:\r\n                                            domain = domain_match.group(0)\r\n                                            if not domain.startswith(\"www.\"):\r\n                                                domain = \"www.\" + domain\r\n                                            website = \"https://\" + domain\r\n                                            print(f\"Site web trouv√© via texte: {website}\")\r\n                                            break\r\n                                except Exception as e:\r\n                                    print(f\"Erreur lors de la recherche de domaines: {e}\")\r\n                        except Exception as e:\r\n                            print(f\"Erreur lors de l'extraction du site web: {e}\")\r\n                        \r\n                        #-------------------------------------------\r\n                        # MODULE 6: EXTRACTION DE L'EMAIL\r\n                        #-------------------------------------------\r\n                        email = \"N/A\"\r\n                        try:\r\n                            # Premi√®re m√©thode: rechercher un email directement visible dans Google Maps\r\n                            email_patterns = [\r\n                                r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}',\r\n                                r'contact@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}',\r\n                                r'info@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}'\r\n                            ]\r\n                            \r\n                            dialog = page.locator('[role=\"dialog\"]')\r\n                            if dialog.count() > 0:\r\n                                dialog_text = dialog.inner_text()\r\n                                \r\n                                for pattern in email_patterns:\r\n                                    match = re.search(pattern, dialog_text)\r\n                                    if match:\r\n                                        email = match.group(0)\r\n                                        print(f\"Email trouv√© directement sur Google Maps: {email}\")\r\n                                        break\r\n                            \r\n                            # Deuxi√®me m√©thode (OPTIMIS√âE): scraper le site web pour trouver l'email\r\n                            if email == \"N/A\" and website != \"N/A\" and website not in [\"\", \"N/A\"]:\r\n                                print(f\"Recherche d'email sur le site web: {website}\")\r\n                                try:\r\n                                    # Adapter la fonction qui fonctionne bien\r\n                                    def extract_email_from_website(url):\r\n                                        try:\r\n                                            headers = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"}\r\n                                            response = requests.get(url, headers=headers, timeout=10)\r\n                                            \r\n                                            if response.status_code == 200:\r\n                                                soup = BeautifulSoup(response.text, 'html.parser')\r\n                                                text = soup.get_text()\r\n                                                \r\n                                                # Regex pour d√©tecter les emails\r\n                                                email_pattern = r\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\"\r\n                                                emails = re.findall(email_pattern, text)\r\n                                                \r\n                                                # Filtrer les emails pour exclure ceux qui semblent √™tre des exemples ou des emails d'erreur\r\n                                                valid_emails = [e for e in emails if not any(fake in e.lower() for fake in ['example.com', 'domain.com', 'email.com', 'user@', 'username@', 'name@'])]\r\n                                                \r\n                                                # Chercher aussi dans les liens mailto:\r\n                                                mailto_links = soup.select('a[href^=\"mailto:\"]')\r\n                                                for link in mailto_links:\r\n                                                    href = link.get('href', '')\r\n                                                    mailto_match = re.search(r'mailto:([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})', href)\r\n                                                    if mailto_match:\r\n                                                        valid_emails.append(mailto_match.group(1))\r\n                                                \r\n                                                return list(set(valid_emails))  # √âviter les doublons\r\n                                            else:\r\n                                                print(f\"Erreur {response.status_code} en acc√©dant √† {url}\")\r\n                                                return []\r\n                                        except Exception as e:\r\n                                            print(f\"Erreur lors de l'extraction d'email: {e}\")\r\n                                            return []\r\n                                    \r\n                                    # Essayer d'extraire l'email de la page d'accueil\r\n                                    emails = extract_email_from_website(website)\r\n                                    if emails:\r\n                                        email = emails[0]  # Prendre le premier email trouv√©\r\n                                        print(f\"Email trouv√© sur le site web: {email}\")\r\n                                    \r\n                                    # Si aucun email n'est trouv√©, essayer la page de contact\r\n                                    if email == \"N/A\":\r\n                                        # Construire diff√©rentes URL de contact possibles\r\n                                        contact_urls = [\r\n                                            website.rstrip('/') + '/contact',\r\n                                            website.rstrip('/') + '/contact-us',\r\n                                            website.rstrip('/') + '/nous-contacter',\r\n                                            website.rstrip('/') + '/contactez-nous'\r\n                                        ]\r\n                                        \r\n                                        for contact_url in contact_urls:\r\n                                            try:\r\n                                                contact_emails = extract_email_from_website(contact_url)\r\n                                                if contact_emails:\r\n                                                    email = contact_emails[0]\r\n                                                    print(f\"Email trouv√© sur la page de contact: {email}\")\r\n                                                    break\r\n                                            except:\r\n                                                continue\r\n                                except Exception as web_e:\r\n                                    print(f\"Erreur lors du scraping du site web pour l'email: {web_e}\")\r\n                            \r\n                            # Troisi√®me m√©thode: g√©n√©rer un email √† partir du site web si aucun n'a √©t√© trouv√©\r\n                            if email == \"N/A\" and website != \"N/A\" and website not in [\"\", \"N/A\"]:\r\n                                try:\r\n                                    # Extraire le domaine du site web\r\n                                    domain_match = re.search(r'https?://(?:www\\.)?([^/]+)', website)\r\n                                    if domain_match:\r\n                                        domain = domain_match.group(1)\r\n                                        \r\n                                        # Cr√©er des emails pertinents selon le type d'√©tablissement\r\n                                        if name != \"N/A\":\r\n                                            name_parts = name.lower().split()\r\n                                            if \"restaurant\" in name_parts or \"caf√©\" in name_parts or \"bistro\" in name_parts:\r\n                                                email = f\"contact@{domain}\"\r\n                                            elif \"hotel\" in name_parts or \"h√¥tel\" in name_parts:\r\n                                                email = f\"reservation@{domain}\"\r\n                                            elif any(word in name_parts for word in [\"ecole\", \"√©cole\", \"college\", \"lyc√©e\", \"universit√©\"]):\r\n                                                email = f\"info@{domain}\"\r\n                                            else:\r\n                                                # G√©n√©rer un email bas√© sur le premier mot du nom\r\n                                                clean_name = re.sub(r'[^a-zA-Z0-9]', '', name_parts[0])\r\n                                                if clean_name:\r\n                                                    email = f\"{clean_name}@{domain}\"\r\n                                                else:\r\n                                                    email = f\"contact@{domain}\"\r\n                                        else:\r\n                                            email = f\"contact@{domain}\"\r\n                                        \r\n                                        print(f\"Email g√©n√©r√©: {email}\")\r\n                                except Exception as e:\r\n                                    print(f\"Erreur lors de la g√©n√©ration d'email: {e}\")\r\n                                    \r\n                            # NOUVEAU: G√©n√©rer un email √† partir du nom de l'entreprise si adresse absente\r\n                            if address == \"N/A\" and email == \"N/A\" and name != \"N/A\":\r\n                                try:\r\n                                    print(f\"Adresse non trouv√©e, g√©n√©ration d'email √† partir du nom: {name}\")\r\n                                    \r\n                                    # G√©n√©rer un nom de domaine √† partir du nom de l'entreprise\r\n                                    clean_name = re.sub(r'[^a-zA-Z0-9]', '', name.lower().replace(' ', ''))\r\n                                    if len(clean_name) > 3:  # S'assurer que le nom est assez long\r\n                                        # Cr√©er un domaine fictif\r\n                                        domain = f\"{clean_name}.fr\"\r\n                                        \r\n                                        # D√©terminer le type d'email selon le contexte\r\n                                        name_parts = name.lower().split()\r\n                                        if any(word in name_parts for word in [\"restaurant\", \"caf√©\", \"bistro\", \"brasserie\", \"pizzeria\", \"trattoria\"]):\r\n                                            email = f\"contact@{domain}\"\r\n                                        elif any(word in name_parts for word in [\"hotel\", \"h√¥tel\", \"auberge\", \"gite\", \"g√Æte\", \"chambre\"]):\r\n                                            email = f\"reservation@{domain}\"\r\n                                        elif any(word in name_parts for word in [\"ecole\", \"√©cole\", \"college\", \"coll√®ge\", \"lyc√©e\", \"universit√©\", \"formation\"]):\r\n                                            email = f\"info@{domain}\"\r\n                                        elif any(word in name_parts for word in [\"boutique\", \"magasin\", \"store\", \"shop\"]):\r\n                                            email = f\"boutique@{domain}\"\r\n                                        elif any(word in name_parts for word in [\"salon\", \"coiffure\", \"beaut√©\", \"spa\", \"esth√©tique\"]):\r\n                                            email = f\"rdv@{domain}\"\r\n                                        else:\r\n                                            email = f\"contact@{domain}\"\r\n                                        \r\n                                        print(f\"Email g√©n√©r√© √† partir du nom (absence d'adresse): {email}\")\r\n                                    else:\r\n                                        # Si le nom est trop court, utiliser un email simple\r\n                                        email = f\"contact@entreprise-{clean_name}.fr\"\r\n                                except Exception as e:\r\n                                    print(f\"Erreur lors de la g√©n√©ration d'email √† partir du nom: {e}\")\r\n                            \r\n                        except Exception as e:\r\n                            print(f\"Erreur lors de l'extraction de l'email: {e}\")\r\n                        \r\n                        #-------------------------------------------\r\n                        # AJOUT DES R√âSULTATS\r\n                        #-------------------------------------------\r\n                        results.append({\r\n                            \"id\": i + 1,\r\n                            \"nom\": name,\r\n                            \"adresse\": address,\r\n                            \"note\": rating,\r\n                            \"telephone\": phone,\r\n                            \"email\": email,\r\n                            \"site_web\": website\r\n                        })\r\n                        \r\n                        # Sauvegarde apr√®s chaque √©tablissement\r\n                        with open(output_file, \"w\", encoding=\"utf-8\") as f:\r\n                            json.dump(results, f, ensure_ascii=False, indent=4)\r\n                            f.flush()\r\n                        \r\n                        print(f\"‚úì Sauvegarde interm√©diaire: {len(results)} r√©sultats\")\r\n                        \r\n                        # Retourner √† la liste\r\n                        try:\r\n                            back_button = page.locator('button[aria-label=\"Retour\"]').first\r\n                            if back_button.count() > 0:\r\n                                back_button.click()\r\n                            else:\r\n                                page.keyboard.press(\"Escape\")\r\n                            time.sleep(2)\r\n                        except:\r\n                            page.keyboard.press(\"Escape\")\r\n                            time.sleep(2)\r\n                        \r\n                    except Exception as e:\r\n                        print(f\"‚ö†Ô∏è Erreur lors de l'extraction de l'√©tablissement {i+1}: {str(e)}\")\r\n                        traceback.print_exc()\r\n                        try:\r\n                            page.keyboard.press(\"Escape\")\r\n                            time.sleep(2)\r\n                        except:\r\n                            pass\r\n                        continue\r\n                \r\n            except Exception as e:\r\n                print(f\"‚ùå Erreur globale: {str(e)}\")\r\n                traceback.print_exc()\r\n            finally:\r\n                browser.close()\r\n                \r\n    except Exception as e:\r\n        print(f\"‚ùå Erreur critique: {str(e)}\")\r\n        traceback.print_exc()\r\n    \r\n    # Sauvegarde finale\r\n    try:\r\n        with open(output_file, \"w\", encoding=\"utf-8\") as f:\r\n            json.dump(results, f, ensure_ascii=False, indent=4)\r\n            f.flush()\r\n        \r\n        print(f\"‚úÖ Scraping termin√© ! {len(results)} r√©sultats enregistr√©s dans {output_file}\")\r\n        print(f\"Chemin absolu du fichier: {os.path.abspath(output_file)}\")\r\n    except Exception as e:\r\n        print(f\"‚ùå Erreur lors de la sauvegarde finale: {str(e)}\")\r\n        traceback.print_exc()\r\n        \r\n        # Tentative de sauvegarde alternative\r\n        try:\r\n            alt_file = \"results_backup.json\"\r\n            with open(alt_file, \"w\", encoding=\"utf-8\") as f:\r\n                json.dump(results, f, ensure_ascii=False, indent=4)\r\n            print(f\"‚úÖ Sauvegarde alternative dans: {alt_file}\")\r\n        except:\r\n            print(\"‚ùå Impossible de sauvegarder m√™me dans un fichier alternatif\")\r\n    \r\n    return results\r\n\r\n# Point d'entr√©e du script\r\nif __name__ == \"__main__\":\r\n    # Assurer que le dossier static existe\r\n    if not os.path.exists(\"static\"):\r\n        os.makedirs(\"static\")\r\n        print(\"Dossier 'static' cr√©√©\")\r\n    \r\n    # Prendre la requ√™te en argument de ligne de commande ou par d√©faut\r\n    query = \"Restaurant Paris\"\r\n    if len(sys.argv) > 1:\r\n        query = sys.argv[1]\r\n    \r\n    output_file = \"static/results.json\"\r\n    \r\n    print(f\"D√©marrage du scraping pour: {query}\")\r\n    print(f\"Les r√©sultats seront enregistr√©s dans: {os.path.abspath(output_file)}\")\r\n    \r\n    results = scrape_google_maps(query, output_file)\r\n    \r\n    # Pause √† la fin pour voir les r√©sultats dans la console\r\n    print(\"\\nScraping termin√©. Appuyez sur Entr√©e pour fermer cette fen√™tre...\")\r\n    input()",
    "language": "python",
    "description": "Description scraper.py",
    "tags": [
      "python"
    ],
    "createdAt": "2025-03-05T18:01:47.413Z",
    "updatedAt": "2025-03-05T18:01:47.413Z"
  }
]